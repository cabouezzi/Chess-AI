//
//  SquareBonuses.swift
//  Chess AI
//
//  Created by Chaniel Ezzi on 8/21/21.
//

import Foundation

// Tables from https://www.chessprogramming.org/Simplified_Evaluation_Function
struct PieceSquareTable {
    
    static func Apply (table: [Int], pieces: Bitboard, isWhite: Bool) -> Int {
        
        var holder = 0
        
        if isWhite {
            
            pieces.loop { i in
                holder += table.reversed()[i]
            }
            
        }
        else {
            
            pieces.loop { i in
                holder += table[i]
            }
            
        }
        
        
        return holder
    }
    
    // From black perspective, because 0 = a1 and 63 = h8
    static let pawnMiddle = [
         0,  0,  0,  0,  0,  0,  0,  0,
        50, 50, 50, 50, 50, 50, 50, 50,
        10, 10, 20, 30, 30, 20, 10, 10,
         5,  5, 10, 25, 25, 10,  5,  5,
         0,  0,  0, 20, 20,  0,  0,  0,
         5, -5,-10,  0,  0,-10, -5,  5,
         5, 10, 10,-20,-20, 10, 10,  5,
         0,  0,  0,  0,  0,  0,  0,  0
    ]
    
    static let pawnEnd = [
         0,  0,  0,  0,  0,  0,  0,  0,
         5,  0, -5,-10,-10, -5,  0, 5,
        10, 10, 20,  5,  5,  5, 10, 10,
        15, 15, 15, 15, 15, 15, 15, 15,
        20, 20, 20, 20, 20, 20, 20, 20,
        30, 25, 25, 25, 25, 25, 25, 30,
        50, 50, 30, 30, 30, 30, 50, 50,
         0,  0,  0,  0,  0,  0,  0,  0
    ]
    
    static let knight = [
        -50,-40,-30,-30,-30,-30,-40,-50,
        -40,-20,  0,  0,  0,  0,-20,-40,
        -30,  0, 10, 15, 15, 10,  0,-30,
        -30,  5, 15, 20, 20, 15,  5,-30,
        -30,  0, 15, 20, 20, 15,  0,-30,
        -30,  5, 10, 15, 15, 10,  5,-30,
        -40,-20,  0,  5,  5,  0,-20,-40,
        -50,-40,-30,-30,-30,-30,-40,-50,
    ]
    
    static let bishop = [
        -20,-10,-10,-10,-10,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5, 10, 10,  5,  0,-10,
        -10,  5,  5, 10, 10,  5,  5,-10,
        -10,  0, 10, 10, 10, 10,  0,-10,
        -10, 10, 10, 10, 10, 10, 10,-10,
        -10,  5,  0,  0,  0,  0,  5,-10,
        -20,-10,-10,-10,-10,-10,-10,-20,
    ]
    
    static let rook = [
          0,  0,  0,  0,  0,  0,  0,  0,
          5, 10, 10, 10, 10, 10, 10,  5,
         -5,  0,  0,  0,  0,  0,  0, -5,
         -5,  0,  0,  0,  0,  0,  0, -5,
         -5,  0,  0,  0,  0,  0,  0, -5,
         -5,  0,  0,  0,  0,  0,  0, -5,
         -5,  0,  0,  0,  0,  0,  0, -5,
          0,  0,  0,  5,  5,  0,  0,  0
    ]
    
    static let queen = [
        -20,-10,-10, -5, -5,-10,-10,-20,
        -10,  0,  0,  0,  0,  0,  0,-10,
        -10,  0,  5,  5,  5,  5,  0,-10,
         -5,  0,  5,  5,  5,  5,  0, -5,
          0,  0,  5,  5,  5,  5,  0, -5,
        -10,  5,  5,  5,  5,  5,  0,-10,
        -10,  0,  5,  0,  0,  0,  0,-10,
        -20,-10,-10, -5, -5,-10,-10,-20
    ]
    
    static let kingMiddle = [
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -30,-40,-40,-50,-50,-40,-40,-30,
        -20,-30,-30,-40,-40,-30,-30,-20,
        -10,-20,-20,-20,-20,-20,-20,-10,
         20, 20,  0,  0,  0,  0, 20, 20,
         20, 30, 10,  0,  0, 10, 30, 20
    ]
    
    static let kingEnd = [
        -50,-40,-30,-20,-20,-30,-40,-50,
        -30,-20,-10,  0,  0,-10,-20,-30,
        -30,-10, 20, 30, 30, 20,-10,-30,
        -30,-10, 30, 40, 40, 30,-10,-30,
        -30,-10, 30, 40, 40, 30,-10,-30,
        -30,-10, 20, 30, 30, 20,-10,-30,
        -30,-30,  0,  0,  0,  0,-30,-30,
        -50,-30,-30,-30,-30,-30,-30,-50
    ]
    
    static let distanceFromCenter = [
          6, 5, 4, 3, 3, 4, 5, 6,
          5, 4, 3, 2, 2, 3, 4, 5,
          4, 3, 2, 1, 1, 2, 3, 4,
          3, 2, 1, 0, 0, 1, 2, 3,
          3, 2, 1, 0, 0, 1, 2, 3,
          4, 3, 2, 1, 1, 2, 3, 4,
          5, 4, 3, 2, 2, 3, 4, 5,
          6, 5, 4, 3, 3, 4, 5, 6
    ]
    
    
}
